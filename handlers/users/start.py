from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from keyboards.default.check_keyboard import check_keyboard_en, check_keyboard_ru
from keyboards.default.request_location import get_keyboard
from keyboards.inline.lang_keyboard import language_keyboard
from loader import dp, bot
from aiogram import types
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from states.personal_data import PersonalData
from utils.get_address import get_address_name


@dp.message_handler(text='/start')
async def bot_start(message: types.Message):
    # await message.answer(f"Salom, {message.from_user.full_name}!")
    text = f"""
            Please select a language ‚¨á\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ ‚¨á
    """
    await message.answer(text, reply_markup=language_keyboard)

    await PersonalData.language.set()


@dp.callback_query_handler(state=PersonalData.language)
async def start_uz(call: CallbackQuery, state: FSMContext):
    lang = call.data
    # —Ñ–∞–º–∏–ª–∏—è
    # –ò–º—è
    txt_en = """
    Sign up
    Now you will be asked some questions.
    Please, answer each one.
    In the end, if everything is correct,
    click YES and 
    your application will be sent to Admin."""
    txt_ru = """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
     –°–µ–π—á–∞—Å –≤–∞–º –∑–∞–¥–∞–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
     –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞–∂–¥—ã–π.
     –í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ,
     –Ω–∞–∂–º–∏—Ç–µ –î–ê –∏
     –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
     """
    if lang == 'en':
        await call.message.answer(txt_en)
        await call.message.answer('<b>‚úç Please enter your fullname:</b>')
    else:
        await call.message.answer(txt_ru)
        await call.message.answer('<b>‚úç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:</b>')
    await PersonalData.fullname.set()
    await state.update_data({
        'language': call.data
    })


@dp.message_handler(state=PersonalData.fullname)
async def answer_fullname(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    fullname = message.text
    await state.update_data(
        {'name': fullname,
         'chat_id': message.from_user.id,
         'username': message.from_user.username
         })
    if lang == 'en':
        reply = "<b>üìå Select your residential address on the map\n or\n" \
                "Click the button below to share your current location:</b>"
    else:
        reply = "<b>üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ\n –∏–ª–∏\n" \
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:</b>"
    await message.answer(reply, reply_markup=get_keyboard())
    await PersonalData.address.set()


@dp.message_handler(state=PersonalData.address)
async def answer_re_location(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    if lang == 'en':
        await message.answer(
            '<b>Re-enter your details:\nShare your location:</b>',
            reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(
            '<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:</b>',
            reply_markup=types.ReplyKeyboardRemove())
    await answer_fullname(message, state)


@dp.message_handler(content_types='location', state=PersonalData.address)
async def answer_location(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    lat = message.location.latitude
    lon = message.location.longitude
    address_name = get_address_name(lon, lat)
    if lang == 'en':
        await message.answer('<b>Enter your age:</b>', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</b>', reply_markup=types.ReplyKeyboardRemove())

    await state.update_data({
        'location': {'lon': lon, 'lat': lat},
        'country': address_name.get('country'),
        'city': address_name.get('city')
    })
    await PersonalData.age.set()


@dp.message_handler(state=PersonalData.age)
async def answer_age(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    age = message.text
    await state.update_data({'age': age})
    if lang == 'en':
        await message.answer('<b>Enter your workplace:</b>')
    else:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ:</b>')

    await PersonalData.workplace.set()


@dp.message_handler(state=PersonalData.workplace)
async def answer_workplace(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    workplace = message.text
    await state.update_data({'workplace': workplace})
    if lang == 'en':
        await message.answer('<b>Enter your job:</b>')
    else:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É:</b>')
    await PersonalData.job.set()


@dp.message_handler(state=PersonalData.job)
async def answer_job(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    job = message.text
    await state.update_data({'job': job})
    if lang == 'en':
        await message.answer('<b>Enter your phone number:</b> \n\nEx: +998934445566')
    else:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> \n\nEx: +998934445566')
    await PersonalData.phone_number.set()


@dp.message_handler(state=PersonalData.phone_number)
async def answer_phone_number(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    phone_number = message.text
    await state.update_data({'phone_number': phone_number})
    if lang == 'en':
        await message.answer('<b>Enter your email:</b>')
    else:
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:</b>')
    await PersonalData.email.set()


@dp.message_handler(state=PersonalData.email)
async def answer_email(message: Message, state: FSMContext):
    email = message.text
    await state.update_data({'email': email})
    data = await state.get_data()
    lang = data.get('language')
    if lang == 'en':
        msg = f'<b>The following information has been received:</b>\n'
        msg += f"<b>üìù Fullname:</b>  {data.get('name')}\n"
        msg += f"<b>üåê Country:</b>   {data.get('country')}\n"
        msg += f"<b>üåÜ City:</b>  {data.get('city')}\n"
        msg += f"<b>‚ö° Age:</b>   {data.get('age')}\n"
        msg += f"<b>üè¢ Workplace:</b> {data.get('workplace')}\n"
        msg += f"<b>‚Äçüíª Job:</b>  {data.get('job')}\n"
        msg += f"<b>üìû Phone number:</b>  {data.get('phone_number')}\n"
        msg += f"<b>üåÄ Telegram:</b>  @{data.get('username')}\n"
        msg += f"<b>üìß Email:</b> {data.get('email')}\n"
        await message.answer(msg)
        await message.answer("<b>Is all the information correct?</b>", reply_markup=check_keyboard_en)
        await bot.send_message(chat_id=1047359359, text=msg)
    else:
        msg = f'<b>–ü–æ–ª—É—á–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
        msg += f"<b>üìù –ü–æ–ª–Ω–æ–µ –∏–º—è:</b>    {data.get('name')}\n"
        msg += f"<b>üåê –°—Ç—Ä–∞–Ω–∞:</b>    {data.get('country')}\n"
        msg += f"<b>üåÜ –ì–æ—Ä–æ–¥:</b>   {data.get('city')}\n"
        msg += f"<b>‚ö° –í–æ–∑—Ä–∞—Å—Ç:</b>   {data.get('age')}\n"
        msg += f"<b>üè¢ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ:</b>    {data.get('workplace')}\n"
        msg += f"<b>‚Äçüíª –ó–∞–¥–∞–Ω–∏–µ:</b>  {data.get('job')}\n"
        msg += f"<b>üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>    {data.get('phone_number')}\n"
        msg += f"<b>üåÄ Telegram:</b>   @{data.get('username')}\n"
        msg += f"<b>üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b>     {data.get('email')}\n"
        await message.answer(msg)
        await message.answer("<b>–í—Å—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞?</b>", reply_markup=check_keyboard_ru)
        await bot.send_message(chat_id=1047359359, text=msg)
    await PersonalData.check.set()


@dp.message_handler(state=PersonalData.check)
async def answer_check(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('language')
    resp = message.text
    if lang == 'en':
        if resp == '‚úÖ YES':
            await message.answer('<b>We have received your personal information successfully.\n Thank you</b>',
                                 reply_markup=types.ReplyKeyboardRemove()
                                 )
            await state.finish()
        else:
            await message.answer('<b>Not accepted</b>',
                                 reply_markup=types.ReplyKeyboardRemove())
            await message.answer('<b>Re-enter your information</b>')
            await message.answer('<b>‚úç Please enter your fullname:</b> ')
            await PersonalData.fullname.set()

    else:
        if resp == '‚úÖ –î–ê':
            await message.answer('<b>Accepted</b>',
                                 reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
        else:
            await message.answer('<b>Not accepted</b>',
                                 reply_markup=types.ReplyKeyboardRemove())
            await message.answer('<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>')
            await message.answer('<b>‚úç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:</b>')
            await PersonalData.fullname.set()
